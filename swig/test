#!/usr/bin/python2.6
import castle
import itertools
import logging
import sys

def main(argv):
    #castle.pycastle_log.setLevel(logging.INFO)
    #castle.pycastle_log.setLevel(logging.DEBUG)

    #the ctor calls castle_connect and establishes shared buffers for keys and values
    foo = castle.Castle()

    #make a new collection then attach to it
    foo.new_collection_attach("bar")

    foo["foo", "bar", "baz"] = "Hello World"

    #do a bunch of inserts on 3d keys
    for x, y, z in list(itertools.product(range(10,13), range(0,3), range(0,3))):
        foo[(str(x), str(y), str(z))] = str((x*1000 + y*100 + z*10)*2)

    expect_no_val = foo["this key doesn't exist"]
    if expect_no_val:
        raise Exception('baby got back (expected nothing, got something)')

    print foo["foo", "bar", "baz"]


    #save the current version number
    i = foo.current_version
    print "We just saved the version number "+str(i)+" to a "+str(type(i))

    foo.collection_snapshot()

    #get it all back from our 3d keys
    for x, y, z in list(itertools.product(range(10,13), range(0,3), range(0,3))):
        got_val = int(foo[(str(x), str(y), str(z))])
        print "got value "+str(got_val)
        expected_val = int(((x*1000 + y*100 + z*10)*2))
        assert expected_val == got_val, "expected "+str(expected_val)+", got "+str(got_val)

    foo["foo", "bar", "baz"] = "Hello World 2"
    print foo["foo", "bar", "baz"]

    ##detach
    foo.collection_detach()

    #attach to version i
    foo.collection_attach(i, "baz")
    print foo["foo", "bar", "baz"]

    #this throws an exception because we can't handle non-string keys yet
    try:
        print foo["zero", 1]
    except Exception, e:
        print "EXCEPTION! "+str(e)
    #this throws an exception because we can't handle non-string values yet
    try:
        foo["1"] = 31
    except Exception, e:
        print "EXCEPTION! "+str(e)

    #dummy example of range query, just to illustrate the idea
    foo_rq = foo.range_query((str(0),str(0),str(0)), (str(2),str(2),str(2)))
    print "Just made foo_rq, which is a "+str(type(foo_rq))
    print "Current stateful op count after we called range_query method : "+ str(foo.current_stateful_op_count)
    print "next yielded "+str(foo_rq.next())
    print "Current stateful op count after we got first element : "+ str(foo.current_stateful_op_count)
    print "next yielded "+str(foo_rq.next())
    for item in foo_rq:
        print "Got "+str(item)
        if item == 7:
            print "We found the item we were looking for; stopping range query"
            foo_rq.close()

    print "Test complete."
    sys.exit(0)


if __name__ == '__main__':
    main(sys.argv[1:])

